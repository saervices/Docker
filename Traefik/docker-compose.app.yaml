---
x-required-services:
  - socketproxy
  - traefik_certs-dumper

services:
  app:
    ######################################################################
    # --- CONTAINER BASICS
    ######################################################################
    image: ${IMAGE:?Image required}                                                                                                                             # Pull image from registry; uncomment build section below for local images
    container_name: ${APP_NAME:?App name required}                                                                                                              # Stable container name for easier orchestration
    hostname: ${APP_NAME}                                                                                                                                       # Hostname inside the container for consistent service discovery
    restart: unless-stopped                                                                                                                                     # Automatically restart unless manually stopped
    # build:                                                                                                                                                    # Optional: build image from local Dockerfile
    #   context: .
    #   dockerfile: Dockerfile

    ######################################################################
    # --- SECURITY SETTINGS
    ######################################################################
    user: "${APP_UID:-1000}:${APP_GID:-1000}"                                                                                                                   # Run as non-root by default; override only if the image already handles user switching
    read_only: true                                                                                                                                             # Lock root filesystem; only declared volumes remain writable
    cap_drop:                                                                                                                                                   # Drop all capabilities by default
      - ALL
    # cap_add:                                                                                                                                                  # Add only the minimum required capabilities (e.g., NET_BIND_SERVICE)
    #   - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true                                                                                                                                  # Prevent privilege escalation
      - seccomp=${SECCOMP_PROFILE:-/etc/docker/seccomp.json}                                                                                                    # Enforce hardened syscall profile (set to unconfined only for debugging)
      - apparmor=${APPARMOR_PROFILE:-docker-default}                                                                                                            # Require AppArmor confinement on compatible hosts

    ######################################################################
    # --- SYSTEM RUNTIME
    ######################################################################
    init: true                                                                                                                                                  # PID 1 is tini â€“ handles zombies properly
    stop_grace_period: 30s                                                                                                                                      # Give app time to shut down gracefully
    oom_score_adj: -500                                                                                                                                         # Reduce likelihood of getting killed under memory pressure
    tmpfs:                                                                                                                                                      # Ephemeral storage in RAM, auto-cleared on restart
      - /run                                                                                                                                                    # Runtime files (PID files, sockets, etc.)
      - /tmp                                                                                                                                                    # Short-lived temp files; faster and auto-cleared on restart
      - /var/tmp                                                                                                                                                # Some apps expect /var/tmp; remove this line if the workload does not touch it
      - /var/log/traefik                                                                                                                                        # Traefik logs

    ######################################################################
    # --- FILESYSTEM & SECRETS
    ######################################################################
    volumes:                                                                                                                                                    # Bind only the paths the app truly needs (avoid mounting host root paths)
      - /etc/localtime:/etc/localtime:ro                                                                                                                        # Synchronise container time with host time
      - /etc/timezone:/etc/timezone:ro                                                                                                                          # Supply timezone information
      - ./appdata/config/middlewares.yaml:/etc/traefik/conf.d/middlewares.yaml:ro                                                                               # Traefik middlewares
      - ./appdata/config/tls-opts.yaml:/etc/traefik/conf.d/tls-opts.yaml:ro                                                                                     # Traefik TLS config
      - ./appdata/config/conf.d:/etc/traefik/conf.d/rules:ro                                                                                                    # Traefik file routers
      - ./appdata/config/certs:/var/traefik/certs:rw                                                                                                            # Traefik certificate store
    secrets:                                                                                                                                                    # Enforce provision of sensitive material via Docker secrets
      - CF_DNS_API_TOKEN

    ######################################################################
    # --- NETWORKING / REVERSE PROXY
    ######################################################################
    labels:                                                                                                                                                     # Metadata for service discovery or reverse proxies (Traefik, Caddy, etc.)
      - "traefik.enable=true"                                                                                                                                   # Enable Traefik routing for this container
      - "traefik.http.routers.${APP_NAME}-rtr.rule=\"${TRAEFIK_HOST}\""                                                                                         # Traefik router rule; supply escaped Host() rule via .env
      - "traefik.http.services.${APP_NAME}-svc.loadBalancer.server.port=${TRAEFIK_PORT:?Port required}"                                                         # Internal container port exposed to the proxy
      - "traefik.http.routers.${APP_NAME}-rtr.middlewares=authentik-proxy@file"                                                                                 # Optional middleware example (authentication, rate limiting, etc.)
    ports:                                                                                                                                                      # Optional: exposed ports
      - 80:80
      - 443:443
    # expose:                                                                                                                                                   # Optional: expose without publishing
    #   - 80
    networks:                                                                                                                                                   # Define which Docker networks the container connects to (controls communication and isolation)
      - backend
      - frontend
    # extra_hosts:                                                                                                                                              # Optional: manual host entries
    #   - "host.docker.internal:host-gateway"

    ######################################################################
    # --- RUNTIME / ENVIRONMENT
    ######################################################################
    command:                                                                                                                                                    # Override default container command
      ### Enable the Traefik WebUI dashboard
      - --api=true
      - --api.dashboard=true
      - --api.disabledashboardad=true
      - --api.insecure=true
      ### Enable log
      - --log.level=${LOG_LEVEL}
      - --log.format=${LOG_FORMAT}
      - --log.filePath=/var/log/traefik/traefik.log
      ### Enable accesslog
      - --accesslog=true
      - --accesslog.bufferingsize=${BUFFERINGSIZE}
      - --accesslog.format=${LOG_FORMAT}
      - --accesslog.filepath=/var/log/traefik/access.log
      - --accesslog.filters.statuscodes=${LOG_STATUSCODES}
      ### Allow insecure backend connections
      - --serverstransport.insecureskipverify=true
      ### Traefik entrypoints (network ports) configuration
      ## Not used in apps, but redirect everything from HTTP to HTTPS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      ## HTTPS endpoint, with domain wildcard
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.asdefault=true
      # Set trusted IPs
      - --entrypoints.websecure.proxyProtocol.trustedIPs=${LOCAL_IPS},${CLOUDFLARE_IPS}
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=${LOCAL_IPS},${CLOUDFLARE_IPS}
      # Generate a wildcard domain certificate
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=${CERTRESOLVER}
      # Enable default TLS options for all routers
      - --entrypoints.websecure.http.tls.options=${TLSOPTIONS}
      # Enable default middlewares for all routers
      - --entrypoints.websecure.http.middlewares=${MIDDLEWARES}
      ### Provider configuration
      - --providers.file.directory=/etc/traefik/conf.d
      - --providers.docker=true
      - --providers.docker.network=frontend
      - --providers.docker.endpoint=tcp://${APP_NAME}-socketproxy:2375
      - --providers.docker.defaultrule='Host(`{{ index .Labels "com.docker.compose.service"}}.{{ env "TRAEFIK_DOMAIN" }}`)'
      - --providers.docker.exposedbydefault=false
      ### Lets Encrypt for SSL certificates
      ## LetsEncrypt Staging Server
      - --certificatesresolvers.${CERTRESOLVER}-staging.acme.email=${EMAIL_PREFIX}@${TRAEFIK_DOMAIN}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.storage=/var/traefik/certs/${CERTRESOLVER}-acme.json
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.${CERTRESOLVER}-staging.acme.keytype=${KEYTYPE}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.dnsChallenge.provider=${CERTRESOLVER}
      - --certificatesResolvers.${CERTRESOLVER}-staging.acme.dnsChallenge.resolvers=${DNSCHALLENGE_RESOLVERS}
      ## LetsEncrypt Production Server
      - --certificatesresolvers.${CERTRESOLVER}.acme.email=${EMAIL_PREFIX}@${TRAEFIK_DOMAIN}
      - --certificatesResolvers.${CERTRESOLVER}.acme.storage=/var/traefik/certs/${CERTRESOLVER}-acme.json
      - --certificatesResolvers.${CERTRESOLVER}.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.${CERTRESOLVER}.acme.keytype=${KEYTYPE}
      - --certificatesResolvers.${CERTRESOLVER}.acme.dnsChallenge.provider=${CERTRESOLVER}
      - --certificatesResolvers.${CERTRESOLVER}.acme.dnsChallenge.resolvers=${DNSCHALLENGE_RESOLVERS}
    # entrypoint: ['your-entrypoint.sh']                                                                                                                        # Override default container entrypoint
    environment:                                                                                                                                                # Environment variables for container configuration
      CF_DNS_API_TOKEN_FILE: /run/secrets/CF_DNS_API_TOKEN                                                                                                      # Cloudflare API token
      TRAEFIK_DOMAIN: ${TRAEFIK_DOMAIN}                                                                                                                         # Passing the domain name to traefik container to be able to use the variable in rules
      TRAEFIK_DOMAIN_1: ${TRAEFIK_DOMAIN_1:-}                                                                                                                   # Passing the second domain name to traefik container to be able to use the variable in rules
      TRAEFIK_DOMAIN_2: ${TRAEFIK_DOMAIN_2:-}                                                                                                                   # Passing the third domain name to traefik container to be able to use the variable in rules
      AUTHENTIK_CONTAINER_NAME: ${AUTHENTIK_CONTAINER_NAME}                                                                                                     # Passing the authentik container name to traefik container to be able to use the variable in rules
    logging:                                                                                                                                                    # Configure log driver and limits to control log size and rotation
      driver: "json-file"
      options:
        max-size: "10m"                                                                                                                                         # Max log file size before rotation
        max-file: "3"                                                                                                                                           # Keep up to 3 rotated log files
    healthcheck:                                                                                                                                                # Periodic container health check to ensure service availability
      test: ['CMD', 'wget', '--spider', '--quiet', 'http://localhost:8080/dashboard/']                                                                          # Adjust URL/tooling to match the image (install curl or replace with wget/netcat)
      interval: 30s                                                                                                                                             # Time between checks
      timeout: 5s                                                                                                                                               # Time to wait for response
      retries: 3                                                                                                                                                # Number of retries before marking unhealthy
      start_period: 10s                                                                                                                                         # Give the container time to initialize before health checks start
    stdin_open: false                                                                                                                                           # Optional: keep STDIN open
    tty: false                                                                                                                                                  # Disable terminal allocation; used for non-interactive containers

    ######################################################################
    # --- DEPENDENCIES
    ######################################################################
    depends_on:                                                                                                                                                 # Ensure these services report healthy status before starting this one
      socketproxy:
        condition: service_healthy

    ######################################################################
    # --- RESOURCE LIMITS
    ######################################################################
    mem_limit: ${MEM_LIMIT:-512m}                                                                                                                               # Upper bound memory allocation (raise cautiously once monitored)
    cpus: ${CPU_LIMIT:-1.0}                                                                                                                                     # Fractional CPU quota; increase only when the workload needs it
    pids_limit: ${PIDS_LIMIT:-128}                                                                                                                              # Cap number of processes/threads to mitigate fork bombs
    shm_size: ${SHM_SIZE:-64m}                                                                                                                                  # Shared memory segment; bump for browsers or multimedia workloads
    # ulimits:                                                                                                                                                  # Additional fine-grained limits (e.g., nofile, nproc)

# volumes:
#   data:
#     driver: local                                                                                                                                             # Local named volume placeholder (swap for cloud/backed driver if required)

secrets:                                                                                                                                                        # Define sensitive data (like passwords, tokens, keys) securely and inject into services at runtime
  CF_DNS_API_TOKEN:
    file: ${CF_DNS_API_TOKEN_PATH:?Secret path required}/${CF_DNS_API_TOKEN_FILENAME:?Secret filename required}                                                 # Load secret material from host (ensure correct permissions)

networks:
  frontend:
    external: true
  backend:
    external: true